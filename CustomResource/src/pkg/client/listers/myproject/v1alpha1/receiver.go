/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cisco/CustomResource/src/pkg/apis/myproject/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReceiverLister helps list Receivers.
// All objects returned here must be treated as read-only.
type ReceiverLister interface {
	// List lists all Receivers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Receiver, err error)
	// Receivers returns an object that can list and get Receivers.
	Receivers(namespace string) ReceiverNamespaceLister
	ReceiverListerExpansion
}

// receiverLister implements the ReceiverLister interface.
type receiverLister struct {
	indexer cache.Indexer
}

// NewReceiverLister returns a new ReceiverLister.
func NewReceiverLister(indexer cache.Indexer) ReceiverLister {
	return &receiverLister{indexer: indexer}
}

// List lists all Receivers in the indexer.
func (s *receiverLister) List(selector labels.Selector) (ret []*v1alpha1.Receiver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Receiver))
	})
	return ret, err
}

// Receivers returns an object that can list and get Receivers.
func (s *receiverLister) Receivers(namespace string) ReceiverNamespaceLister {
	return receiverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReceiverNamespaceLister helps list and get Receivers.
// All objects returned here must be treated as read-only.
type ReceiverNamespaceLister interface {
	// List lists all Receivers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Receiver, err error)
	// Get retrieves the Receiver from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Receiver, error)
	ReceiverNamespaceListerExpansion
}

// receiverNamespaceLister implements the ReceiverNamespaceLister
// interface.
type receiverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Receivers in the indexer for a given namespace.
func (s receiverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Receiver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Receiver))
	})
	return ret, err
}

// Get retrieves the Receiver from the indexer for a given namespace and name.
func (s receiverNamespaceLister) Get(name string) (*v1alpha1.Receiver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("receiver"), name)
	}
	return obj.(*v1alpha1.Receiver), nil
}
